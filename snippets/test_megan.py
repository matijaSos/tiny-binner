import guppy.heapy.RM
import time
import logging
import logging.config
import argparse
import sys,os
import operator
sys.path.append(os.getcwd())

from utils.argparser import DefaultBinnerArgParser
from ncbi.db.data_access import DataAccess
from ncbi.taxonomy.tree import TaxTree
from data.containers.read import ReadContainer
from data.containers.record import RecordContainer
from data.containers.cdsaln import CdsAlnContainer
import filters.host as host_filter
import filters.readprocessing as rstate
from filters.binning import bin_reads
from utils import timeit
from utils.location import Location
from formats.xml_output import *

from testing.solution import Solution   
from testing.rank_accuracy import RankAccuracy

class TestRunArgParser(DefaultBinnerArgParser):
    def __init__(self):
        super(TestRunArgParser, self).__init__('''\
                Loads correct assignment from metasim FASTA, \
                assignment by MEGAN from exported CSV, \
                and evaluates accuracy.
                ''')
        self.add_argument('megan_assignment_file',
                help='MEGAN assignment file',
                type=str)
        self.add_argument('metasim_fasta',
                help='FASTA file generated by metasim - used to evaluate solution',
                type=str)
def main():
    '''
    Script to test accuracy of MEGAN.
    '''

    # Input arguments
    argparser = TestRunArgParser()
    args  = argparser.parse_args()

    # Access database
    dataAccess = DataAccess(args)

    print '1. Loading tax tree...'
    tax_tree = TaxTree()
    print 'done.'

    print '2. Loading correct solution...'
    sol_metasim = Solution.from_metasim_fasta(args.metasim_fasta, dataAccess)
    print 'done'

    print '3. Loading MEGAN solution...'
    sol_megan = Solution.from_CSV(args.megan_assignment_file)
    print 'done'

    print '4. Evaluating MEGAN solution...'
    rank_acc = RankAccuracy(tax_tree, sol_metasim, sol_megan)
    print 'done'

    rank_acc.print_data()

    '''
    print '3. Loading correct solution...'
    sol = Solution(args.metasim_fasta, dataAccess)
    print 'done'
    
    print '4. Evaluating our solution...'
    rankAcc = RankAccuracy(tax_tree, sol, read_container)
    print 'done'

    # Print test results
    rankAcc.printData()
    '''
    

if __name__ == '__main__':
    main()
