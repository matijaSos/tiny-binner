from Bio import SeqIO
import re
import csv

class Solution(object):
    '''
    Containts solution of metagenomic sample.
    To each read single tax_id is assigned.
    '''
    def __init__(self, id2taxon):
        '''Constructor

        Args:
            id2taxon: (dict) read.id -> taxon
        '''
        self.id2taxon = id2taxon

    def get_tax_id(self, read_id):
        '''Fetches tax_id assigned to a given read

        Args:
            read_id  (string) id of a read
        Returns:
            (int): tax_id
        '''
        return self.id2taxon[read_id]

    def add_assignment(self, read_id, tax_id):
        '''Adds assignment of read to taxon.

        Args:
            read_id (string): Read id
            tax_id (int): Taxon id
        '''
        self.id2taxon[read_id] = tax_id;


    def print_data(self):
        for idx,taxon in self.id2taxon.iteritems():
            print str(idx) + " " + str(taxon)

    # --------------------- Factory methods ---------------------- #

    @staticmethod
    def from_metasim_fasta(path, dataAccess):
        '''Loads read assignment from FASTA file generated by metasim.

        Args:
            path (string): Path to the metasim fasta file
            dataAccess (DataAccess): Db connection object
        Returns:
            (Solution): New instance containing loaded data
        '''
        # For each read, gi of origin is extracted from header 
        # and mapped to tax_id.
        id2taxon = {}

        handle = open(path, "rU")
        for read in SeqIO.parse(handle, "fasta"):
            try:
                gi = re.search("GI=(\d+)", read.description).group(1)
                taxon = dataAccess.get_taxids([gi], format=list)[0]
            except Exception:
                taxon = "none"
            id2taxon[read.id] = taxon

        handle.close()
        return Solution(id2taxon)

    @staticmethod
    def from_CSV(path):
        '''Loads read assignment from CSV file.

        Assumption: CSV is comma separated
        Row format: "read_id,tax_id"

        Args:
            path (string): Path to the CSV file
        Returns:
            (Solution): New Solution instance
        '''
        id2taxon = {}

        handle = open(path, "rb")
        reader = csv.reader(handle)
        for row in reader:
            read_id = row[0]
            tax_id  = int(row[1])
            id2taxon[read_id] = tax_id
        
        handle.close()
        return Solution(id2taxon)

    @staticmethod
    def create_empty():
        ''' Creates empty Solution with no assignments.
        '''
        return Solution({})

